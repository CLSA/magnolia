-- MySQL Script generated by MySQL Workbench
-- Tue 04 Sep 2018 02:51:23 PM EDT
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='';

-- -----------------------------------------------------
-- Schema cenozo
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `cenozo` ;

-- -----------------------------------------------------
-- Schema cenozo
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `cenozo` DEFAULT CHARACTER SET utf8 ;
-- -----------------------------------------------------
-- Schema magnolia
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `magnolia` ;

-- -----------------------------------------------------
-- Schema magnolia
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `magnolia` ;
USE `cenozo` ;

-- -----------------------------------------------------
-- Table `cenozo`.`age_group`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`age_group` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`age_group` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `lower` INT NOT NULL,
  `upper` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_lower` (`lower` ASC),
  UNIQUE INDEX `uq_upper` (`upper` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`cohort`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`cohort` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`cohort` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`source`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`source` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`source` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `override_quota` TINYINT(1) NOT NULL DEFAULT 0,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`language`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`language` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`language` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 0,
  `code` CHAR(2) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  UNIQUE INDEX `uq_code` (`code` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`availability_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`availability_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`availability_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(25) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`exclusion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`exclusion` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`exclusion` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `description` VARCHAR(512) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `uid` VARCHAR(45) NOT NULL COMMENT 'External unique ID',
  `source_id` INT UNSIGNED NULL DEFAULT NULL,
  `cohort_id` INT UNSIGNED NOT NULL,
  `grouping` VARCHAR(45) NULL DEFAULT NULL,
  `honorific` VARCHAR(10) NOT NULL,
  `first_name` VARCHAR(45) NOT NULL,
  `other_name` VARCHAR(100) NULL DEFAULT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `sex` ENUM('male', 'female') NOT NULL,
  `date_of_birth` DATE NULL DEFAULT NULL,
  `date_of_death` DATE NULL DEFAULT NULL,
  `date_of_death_accuracy` ENUM('full date known', 'day unknown', 'month and day unknown') NULL DEFAULT NULL,
  `age_group_id` INT UNSIGNED NULL DEFAULT NULL,
  `exclusion_id` INT UNSIGNED NULL DEFAULT NULL,
  `language_id` INT UNSIGNED NOT NULL,
  `availability_type_id` INT UNSIGNED NULL DEFAULT NULL,
  `callback` DATETIME NULL DEFAULT NULL,
  `override_quota` TINYINT(1) NOT NULL DEFAULT 0,
  `email` VARCHAR(255) NULL DEFAULT NULL,
  `email_datetime` DATETIME NULL DEFAULT NULL,
  `email_old` VARCHAR(255) NULL DEFAULT NULL,
  `mass_email` TINYINT(1) NOT NULL DEFAULT 1,
  `check_withdraw` DATETIME NULL DEFAULT NULL,
  `delink` TINYINT(1) NOT NULL DEFAULT 0,
  `out_of_area` TINYINT(1) NOT NULL DEFAULT 0,
  `low_education` TINYINT(1) NOT NULL DEFAULT 0,
  `global_note` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_uid` (`uid` ASC),
  INDEX `dk_uid` (`uid` ASC),
  INDEX `fk_age_group_id` (`age_group_id` ASC),
  INDEX `fk_cohort_id` (`cohort_id` ASC),
  INDEX `fk_source_id` (`source_id` ASC),
  INDEX `dk_email_datetime` (`email_datetime` ASC),
  INDEX `fk_language_id` (`language_id` ASC),
  INDEX `fk_availability_type_id` (`availability_type_id` ASC),
  INDEX `dk_datetime` (`callback` ASC),
  INDEX `fk_exclusion_id` (`exclusion_id` ASC),
  CONSTRAINT `fk_participant_age_group_id`
    FOREIGN KEY (`age_group_id`)
    REFERENCES `cenozo`.`age_group` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_cohort_id`
    FOREIGN KEY (`cohort_id`)
    REFERENCES `cenozo`.`cohort` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_source_id`
    FOREIGN KEY (`source_id`)
    REFERENCES `cenozo`.`source` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_availability_type_id`
    FOREIGN KEY (`availability_type_id`)
    REFERENCES `cenozo`.`availability_type` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_exclusion_id`
    FOREIGN KEY (`exclusion_id`)
    REFERENCES `cenozo`.`exclusion` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`form_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`form_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`form_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(100) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`form`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`form` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`form` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `form_type_id` INT UNSIGNED NOT NULL,
  `date` DATE NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_form_type_id` (`form_type_id` ASC),
  UNIQUE INDEX `uq_participant_id_form_type_id_date` (`participant_id` ASC, `form_type_id` ASC, `date` ASC),
  CONSTRAINT `fk_form_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_form_form_type_id`
    FOREIGN KEY (`form_type_id`)
    REFERENCES `cenozo`.`form_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`user` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`user` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `password` VARCHAR(255) NULL DEFAULT NULL,
  `first_name` VARCHAR(255) NOT NULL,
  `last_name` VARCHAR(255) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `email` VARCHAR(255) NULL DEFAULT NULL,
  `timezone` VARCHAR(45) NOT NULL DEFAULT 'Canada/Eastern',
  `use_12hour_clock` TINYINT(1) NOT NULL DEFAULT 0,
  `login_failures` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `dk_active` (`active` ASC),
  UNIQUE INDEX `uq_email` (`email` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`region`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`region` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`region` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `abbreviation` VARCHAR(5) NOT NULL,
  `country` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  UNIQUE INDEX `uq_abbreviation` (`abbreviation` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`role` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`role` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `tier` INT UNSIGNED NOT NULL DEFAULT 1 COMMENT '1 = normal, 2 = site admin, 3 = global admin',
  `all_sites` TINYINT(1) NOT NULL DEFAULT 0,
  `special` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`site`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`site` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`site` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `timezone` VARCHAR(45) NOT NULL DEFAULT 'Canada/Eastern',
  `title` VARCHAR(45) NULL DEFAULT NULL,
  `phone_number` VARCHAR(45) NULL DEFAULT NULL,
  `address1` VARCHAR(512) NULL DEFAULT NULL,
  `address2` VARCHAR(512) NULL DEFAULT NULL,
  `city` VARCHAR(100) NULL DEFAULT NULL,
  `region_id` INT UNSIGNED NULL DEFAULT NULL,
  `postcode` VARCHAR(10) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  CONSTRAINT `fk_site_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`event_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`event_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`event_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `record_address` TINYINT(1) NOT NULL DEFAULT 0,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`postcode`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`postcode` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`postcode` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(7) NOT NULL COMMENT 'Postcodes with the same province, tz and dst are grouped.',
  `region_id` INT UNSIGNED NOT NULL,
  `timezone_offset` FLOAT NOT NULL,
  `daylight_savings` TINYINT(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  CONSTRAINT `fk_postcode_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`alternate`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`alternate` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`alternate` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `alternate` TINYINT(1) NOT NULL DEFAULT 0,
  `informant` TINYINT(1) NOT NULL DEFAULT 0,
  `proxy` TINYINT(1) NOT NULL DEFAULT 0,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `association` VARCHAR(45) NULL DEFAULT NULL,
  `global_note` TEXT NULL DEFAULT NULL,
  `email` VARCHAR(255) NULL DEFAULT NULL,
  `email_datetime` DATETIME NULL DEFAULT NULL,
  `email_old` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  CONSTRAINT `fk_alternate_participant`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`address` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`address` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `alternate_id` INT UNSIGNED NULL DEFAULT NULL,
  `participant_id` INT UNSIGNED NULL DEFAULT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `rank` INT NOT NULL,
  `international` TINYINT(1) NOT NULL DEFAULT 0,
  `address1` VARCHAR(512) NOT NULL,
  `address2` VARCHAR(512) NULL DEFAULT NULL,
  `city` VARCHAR(100) NOT NULL,
  `region_id` INT UNSIGNED NULL DEFAULT NULL,
  `postcode` VARCHAR(10) NULL DEFAULT NULL,
  `international_region` VARCHAR(100) NULL DEFAULT NULL,
  `international_country` VARCHAR(100) NULL DEFAULT NULL,
  `timezone_offset` FLOAT NOT NULL,
  `daylight_savings` TINYINT(1) NOT NULL,
  `january` TINYINT(1) NOT NULL DEFAULT 1,
  `february` TINYINT(1) NOT NULL DEFAULT 1,
  `march` TINYINT(1) NOT NULL DEFAULT 1,
  `april` TINYINT(1) NOT NULL DEFAULT 1,
  `may` TINYINT(1) NOT NULL DEFAULT 1,
  `june` TINYINT(1) NOT NULL DEFAULT 1,
  `july` TINYINT(1) NOT NULL DEFAULT 1,
  `august` TINYINT(1) NOT NULL DEFAULT 1,
  `september` TINYINT(1) NOT NULL DEFAULT 1,
  `october` TINYINT(1) NOT NULL DEFAULT 1,
  `november` TINYINT(1) NOT NULL DEFAULT 1,
  `december` TINYINT(1) NOT NULL DEFAULT 1,
  `note` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_region_id` (`region_id` ASC),
  INDEX `dk_city` (`city` ASC),
  INDEX `dk_postcode` (`postcode` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_alternate_id` (`alternate_id` ASC),
  UNIQUE INDEX `uq_alternate_id_participant_id_rank` (`alternate_id` ASC, `participant_id` ASC, `rank` ASC),
  CONSTRAINT `fk_address_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_address_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_address_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`consent_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`consent_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`consent_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`consent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`consent` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`consent` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `consent_type_id` INT UNSIGNED NOT NULL,
  `accept` TINYINT(1) NOT NULL,
  `written` TINYINT(1) NOT NULL,
  `datetime` DATETIME NOT NULL,
  `note` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `dk_datetime` (`datetime` ASC),
  INDEX `fk_consent_type_id` (`consent_type_id` ASC),
  CONSTRAINT `fk_consent_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_consent_consent_type_id`
    FOREIGN KEY (`consent_type_id`)
    REFERENCES `cenozo`.`consent_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`jurisdiction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`jurisdiction` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`jurisdiction` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `postcode` VARCHAR(7) NOT NULL,
  `longitude` FLOAT NOT NULL,
  `latitude` FLOAT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_site_id_postcode` (`site_id` ASC, `postcode` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `dk_postcode` (`postcode` ASC),
  CONSTRAINT `fk_jurisdiction_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`phone`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`phone` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`phone` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `alternate_id` INT UNSIGNED NULL DEFAULT NULL,
  `participant_id` INT UNSIGNED NULL DEFAULT NULL,
  `address_id` INT UNSIGNED NULL DEFAULT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `rank` INT NOT NULL,
  `international` TINYINT(1) NOT NULL DEFAULT 0,
  `type` ENUM('home', 'home2', 'work', 'work2', 'mobile', 'mobile2', 'other', 'other2') NOT NULL,
  `number` VARCHAR(127) NOT NULL,
  `note` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_address_id` (`address_id` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_alternate_id` (`alternate_id` ASC),
  UNIQUE INDEX `uq_alternate_id_participant_id_rank` (`alternate_id` ASC, `participant_id` ASC, `rank` ASC),
  CONSTRAINT `fk_phone_address`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_phone_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_phone_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`quota`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`quota` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`quota` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `region_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `sex` ENUM('male', 'female') NOT NULL,
  `age_group_id` INT UNSIGNED NOT NULL,
  `population` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_region_id_site_id_sex_age_group_id` (`region_id` ASC, `site_id` ASC, `sex` ASC, `age_group_id` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  INDEX `fk_age_group_id` (`age_group_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  CONSTRAINT `fk_quota_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_quota_age_group_id`
    FOREIGN KEY (`age_group_id`)
    REFERENCES `cenozo`.`age_group` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_quota_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`note`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`note` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`note` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `alternate_id` INT UNSIGNED NOT NULL,
  `participant_id` INT UNSIGNED NULL DEFAULT NULL,
  `user_id` INT UNSIGNED NULL DEFAULT NULL,
  `sticky` TINYINT(1) NOT NULL DEFAULT 0,
  `datetime` DATETIME NOT NULL,
  `note` TEXT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `dk_sticky_datetime` (`sticky` ASC, `datetime` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_alternate_id` (`alternate_id` ASC),
  CONSTRAINT `fk_note_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_note_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_note_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_participant`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_has_participant` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_participant` (
  `application_id` INT UNSIGNED NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `preferred_site_id` INT UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`application_id`, `participant_id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  INDEX `fk_preferred_site_id` (`preferred_site_id` ASC),
  CONSTRAINT `fk_application_has_participant_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_has_participant_preferred_site_id`
    FOREIGN KEY (`preferred_site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`event`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`event` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`event` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `event_type_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NULL DEFAULT NULL,
  `user_id` INT UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `dk_datetime` (`datetime` ASC),
  INDEX `fk_event_type_id` (`event_type_id` ASC),
  UNIQUE INDEX `uq_participant_id_event_type_id_datetime` (`participant_id` ASC, `event_type_id` ASC, `datetime` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  CONSTRAINT `fk_event_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_event_type_id`
    FOREIGN KEY (`event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`unique_identifier_pool`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`unique_identifier_pool` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`unique_identifier_pool` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `uid` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_uid` (`uid` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_cohort`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_has_cohort` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_cohort` (
  `application_id` INT UNSIGNED NOT NULL,
  `cohort_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `grouping` ENUM('region', 'jurisdiction') NOT NULL DEFAULT 'region',
  PRIMARY KEY (`application_id`, `cohort_id`),
  INDEX `fk_cohort_id` (`cohort_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_application_has_cohort_cohort_id`
    FOREIGN KEY (`cohort_id`)
    REFERENCES `cenozo`.`cohort` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`hin`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`hin` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`hin` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `code` VARCHAR(45) NOT NULL,
  `region_id` INT UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  UNIQUE INDEX `uq_participant_id_datetime` (`participant_id` ASC, `datetime` ASC),
  CONSTRAINT `fk_hin_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_hin_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`region_site`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`region_site` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`region_site` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL COMMENT 'Used to determine a participant\'s default site.',
  `site_id` INT UNSIGNED NOT NULL,
  `region_id` INT UNSIGNED NOT NULL,
  `language_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_region_id` (`region_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  UNIQUE INDEX `uq_site_id_region_id_language_id` (`site_id` ASC, `region_id` ASC, `language_id` ASC),
  INDEX `fk_language_id` (`language_id` ASC),
  CONSTRAINT `fk_region_site_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_region_site_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_region_site_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`user_has_language`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`user_has_language` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`user_has_language` (
  `user_id` INT UNSIGNED NOT NULL,
  `language_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`user_id`, `language_id`),
  INDEX `fk_language_id` (`language_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  CONSTRAINT `fk_user_has_language_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_user_has_language_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`collection`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`collection` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`collection` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `locked` TINYINT(1) NOT NULL DEFAULT 0,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`collection_has_participant`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`collection_has_participant` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`collection_has_participant` (
  `collection_id` INT UNSIGNED NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`collection_id`, `participant_id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_collection_id` (`collection_id` ASC),
  CONSTRAINT `fk_collection_has_participant_collection_id`
    FOREIGN KEY (`collection_id`)
    REFERENCES `cenozo`.`collection` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_collection_has_participant_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`user_has_collection`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`user_has_collection` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`user_has_collection` (
  `user_id` INT UNSIGNED NOT NULL,
  `collection_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`user_id`, `collection_id`),
  INDEX `fk_collection_id` (`collection_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  CONSTRAINT `fk_user_has_collection_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_has_collection_collection_id`
    FOREIGN KEY (`collection_id`)
    REFERENCES `cenozo`.`collection` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Users who can edit locked collections.';


-- -----------------------------------------------------
-- Table `cenozo`.`activity`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`activity` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`activity` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` INT UNSIGNED NOT NULL,
  `application_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `start_datetime` DATETIME NOT NULL,
  `end_datetime` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_activity_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_activity_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_activity_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_site`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_site` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_site` (
  `application_id` INT UNSIGNED NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `site_id` INT UNSIGNED NULL DEFAULT NULL,
  `default_site_id` INT UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`application_id`, `participant_id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_default_site_id` (`default_site_id` ASC),
  CONSTRAINT `fk_participant_site_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_site_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_site_default_site_id`
    FOREIGN KEY (`default_site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_primary_address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_primary_address` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_primary_address` (
  `participant_id` INT UNSIGNED NOT NULL,
  `address_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_address_id` (`address_id` ASC),
  CONSTRAINT `fk_participant_primary_address_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_primary_address_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`alternate_first_address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`alternate_first_address` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`alternate_first_address` (
  `alternate_id` INT UNSIGNED NOT NULL,
  `address_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`alternate_id`),
  INDEX `fk_address_id` (`address_id` ASC),
  CONSTRAINT `fk_alternate_first_address_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_alternate_first_address_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_first_address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_first_address` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_first_address` (
  `participant_id` INT UNSIGNED NOT NULL,
  `address_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`),
  INDEX `fk_address_id` (`address_id` ASC),
  CONSTRAINT `fk_participant_first_address_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_first_address_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`system_message`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`system_message` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`system_message` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `application_id` INT UNSIGNED NULL DEFAULT NULL,
  `site_id` INT UNSIGNED NULL DEFAULT NULL,
  `role_id` INT UNSIGNED NULL DEFAULT NULL,
  `title` VARCHAR(255) NOT NULL,
  `note` TEXT NOT NULL,
  `expiry` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_system_message_id` (`application_id` ASC),
  CONSTRAINT `fk_system_message_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_system_message_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_consent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_last_consent` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_consent` (
  `participant_id` INT UNSIGNED NOT NULL,
  `consent_type_id` INT UNSIGNED NOT NULL,
  `consent_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`, `consent_type_id`),
  INDEX `fk_consent_id` (`consent_id` ASC),
  INDEX `fk_consent_type_id` (`consent_type_id` ASC),
  CONSTRAINT `fk_participant_last_consent_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_consent_consent_id`
    FOREIGN KEY (`consent_id`)
    REFERENCES `cenozo`.`consent` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_consent_consent_type_id`
    FOREIGN KEY (`consent_type_id`)
    REFERENCES `cenozo`.`consent_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_written_consent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_last_written_consent` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_written_consent` (
  `participant_id` INT UNSIGNED NOT NULL,
  `consent_type_id` INT UNSIGNED NOT NULL,
  `consent_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`, `consent_type_id`),
  INDEX `fk_consent_id` (`consent_id` ASC),
  INDEX `fk_consent_type_id` (`consent_type_id` ASC),
  CONSTRAINT `fk_participant_last_written_consent_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_written_consent_consent_id`
    FOREIGN KEY (`consent_id`)
    REFERENCES `cenozo`.`consent` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_written_consent_consent_type_id`
    FOREIGN KEY (`consent_type_id`)
    REFERENCES `cenozo`.`consent_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_site`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_has_site` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_site` (
  `application_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`application_id`, `site_id`),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_application_has_site_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_event`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_last_event` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_event` (
  `participant_id` INT UNSIGNED NOT NULL,
  `event_type_id` INT UNSIGNED NOT NULL,
  `event_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`, `event_type_id`),
  INDEX `fk_event_type_id` (`event_type_id` ASC),
  INDEX `fk_event_id` (`event_id` ASC),
  CONSTRAINT `fk_participant_last_event_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_event_event_type_id`
    FOREIGN KEY (`event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_event_event_id`
    FOREIGN KEY (`event_id`)
    REFERENCES `cenozo`.`event` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`script`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`script` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`script` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `started_event_type_id` INT UNSIGNED NULL DEFAULT NULL,
  `finished_event_type_id` INT UNSIGNED NULL DEFAULT NULL,
  `sid` INT NOT NULL,
  `repeated` TINYINT(1) NOT NULL DEFAULT 0,
  `withdraw` TINYINT(1) NOT NULL DEFAULT 0,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_started_event_type_id` (`started_event_type_id` ASC),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `fk_finished_event_type_id` (`finished_event_type_id` ASC),
  UNIQUE INDEX `uq_sid` (`sid` ASC),
  CONSTRAINT `fk_script_started_event_type_id`
    FOREIGN KEY (`started_event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_script_finished_event_type_id`
    FOREIGN KEY (`finished_event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_script`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_has_script` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_script` (
  `application_id` INT UNSIGNED NOT NULL,
  `script_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`application_id`, `script_id`),
  INDEX `fk_script_id` (`script_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_application_has_script_script_id`
    FOREIGN KEY (`script_id`)
    REFERENCES `cenozo`.`script` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`event_address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`event_address` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`event_address` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `event_id` INT UNSIGNED NOT NULL,
  `address_id` INT UNSIGNED NULL DEFAULT NULL,
  `international` TINYINT(1) NOT NULL DEFAULT 0,
  `address1` VARCHAR(512) NOT NULL,
  `address2` VARCHAR(512) NULL DEFAULT NULL,
  `city` VARCHAR(100) NOT NULL,
  `region_id` INT UNSIGNED NULL DEFAULT NULL,
  `postcode` VARCHAR(10) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_event_id` (`event_id` ASC),
  INDEX `fk_address_id` (`address_id` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  CONSTRAINT `fk_event_address_event_id`
    FOREIGN KEY (`event_id`)
    REFERENCES `cenozo`.`event` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_address_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_address_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`variable_cache`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`variable_cache` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`variable_cache` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `variable` VARCHAR(255) NOT NULL,
  `value` VARCHAR(255) NULL DEFAULT NULL,
  `expiry` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `dk_variable` (`variable` ASC),
  UNIQUE INDEX `uq_participant_id_variable` (`participant_id` ASC, `variable` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  CONSTRAINT `fk_variable_cache_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`search`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`search` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`search` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `word` VARCHAR(255) NOT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_word` (`word` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`search_result`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`search_result` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`search_result` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `search_id` INT UNSIGNED NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `record_id` INT UNSIGNED NOT NULL,
  `subject` VARCHAR(64) NOT NULL,
  `column_name` VARCHAR(64) NOT NULL,
  `value` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_search_id` (`search_id` ASC),
  UNIQUE INDEX `uq_search_id_participant_id_subject_column_name` (`search_id` ASC, `participant_id` ASC, `subject` ASC, `column_name` ASC),
  UNIQUE INDEX `uq_search_id_record_id_subject_column_name` (`search_id` ASC, `record_id` ASC, `subject` ASC, `column_name` ASC),
  CONSTRAINT `fk_search_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_search_result_search_id`
    FOREIGN KEY (`search_id`)
    REFERENCES `cenozo`.`search` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`next_of_kin`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`next_of_kin` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`next_of_kin` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` VARCHAR(45) NULL DEFAULT NULL,
  `create_timestamp` VARCHAR(45) NULL DEFAULT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `first_name` VARCHAR(45) NULL DEFAULT NULL,
  `last_name` VARCHAR(45) NULL DEFAULT NULL,
  `gender` VARCHAR(10) NULL DEFAULT NULL,
  `phone` VARCHAR(100) NULL DEFAULT NULL,
  `street` VARCHAR(255) NULL DEFAULT NULL,
  `city` VARCHAR(100) NULL DEFAULT NULL,
  `province` VARCHAR(45) NULL DEFAULT NULL,
  `postal_code` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_participant_id` (`participant_id` ASC),
  CONSTRAINT `fk_next_of_kin_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`study_phase`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`study_phase` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`study_phase` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `rank` INT UNSIGNED NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_rank` (`rank` ASC),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(45) NOT NULL,
  `type` VARCHAR(45) NOT NULL,
  `study_phase_id` INT UNSIGNED NULL DEFAULT NULL,
  `application_type_id` INT UNSIGNED NOT NULL,
  `url` VARCHAR(511) NOT NULL,
  `version` VARCHAR(45) NOT NULL,
  `release_based` TINYINT(1) NOT NULL DEFAULT 1,
  `release_event_type_id` INT UNSIGNED NOT NULL,
  `country` VARCHAR(45) NOT NULL,
  `timezone` VARCHAR(45) NOT NULL DEFAULT 'Canada/Eastern',
  `update_queue` TINYINT(1) NOT NULL DEFAULT 0,
  `primary_color` CHAR(7) NOT NULL DEFAULT '#3f3f7d',
  `secondary_color` CHAR(7) NOT NULL DEFAULT '#9ba8b7',
  `theme_expired` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `fk_release_event_type_id` (`release_event_type_id` ASC),
  INDEX `fk_application_type_id` (`application_type_id` ASC),
  INDEX `fk_study_phase_id` (`study_phase_id` ASC),
  CONSTRAINT `fk_application_release_event_type_id`
    FOREIGN KEY (`release_event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_application_type_id`
    FOREIGN KEY (`application_type_id`)
    REFERENCES `cenozo`.`application_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_study_phase_id`
    FOREIGN KEY (`study_phase_id`)
    REFERENCES `cenozo`.`study_phase` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`report_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`report_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`report_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `subject` VARCHAR(45) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`report_schedule`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`report_schedule` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`report_schedule` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `report_type_id` INT UNSIGNED NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `application_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `schedule` ENUM('daily', 'weekly', 'monthly') NOT NULL DEFAULT 'daily',
  `format` ENUM('CSV', 'Excel', 'LibreOffice') NOT NULL DEFAULT 'CSV',
  PRIMARY KEY (`id`),
  INDEX `fk_report_type_id` (`report_type_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `dk_repeat` (`schedule` ASC),
  CONSTRAINT `fk_report_schedule_report_type_id`
    FOREIGN KEY (`report_type_id`)
    REFERENCES `cenozo`.`report_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_schedule_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_schedule_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_schedule_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_schedule_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`report`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`report` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`report` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `report_type_id` INT UNSIGNED NOT NULL,
  `report_schedule_id` INT UNSIGNED NULL DEFAULT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `application_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `format` ENUM('CSV', 'Excel', 'LibreOffice') NOT NULL DEFAULT 'CSV',
  `size` BIGINT UNSIGNED NULL DEFAULT NULL,
  `stage` ENUM('started', 'reading data', 'writing data', 'completed', 'failed') NOT NULL DEFAULT 'started',
  `progress` FLOAT NOT NULL DEFAULT 0,
  `datetime` DATETIME NOT NULL,
  `elapsed` FLOAT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_report_type_id` (`report_type_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  INDEX `fk_report_schedule_id` (`report_schedule_id` ASC),
  INDEX `dk_datetime` (`datetime` ASC),
  INDEX `dk_stage` (`stage` ASC),
  INDEX `dk_size` (`size` ASC),
  CONSTRAINT `fk_report_report_type_id`
    FOREIGN KEY (`report_type_id`)
    REFERENCES `cenozo`.`report_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_report_schedule_id`
    FOREIGN KEY (`report_schedule_id`)
    REFERENCES `cenozo`.`report_schedule` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`role_has_report_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`role_has_report_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`role_has_report_type` (
  `role_id` INT UNSIGNED NOT NULL,
  `report_type_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`role_id`, `report_type_id`),
  INDEX `fk_report_type_id` (`report_type_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_role_has_report_type_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_role_has_report_type_report_type_id`
    FOREIGN KEY (`report_type_id`)
    REFERENCES `cenozo`.`report_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`report_restriction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`report_restriction` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`report_restriction` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `report_type_id` INT UNSIGNED NOT NULL,
  `rank` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(45) NOT NULL,
  `mandatory` TINYINT(1) NOT NULL DEFAULT 0,
  `null_allowed` TINYINT(1) NOT NULL DEFAULT 0,
  `restriction_type` ENUM('table', 'uid_list', 'string', 'integer', 'decimal', 'date', 'datetime', 'time', 'boolean', 'enum') NOT NULL,
  `custom` TINYINT(1) NOT NULL DEFAULT 0,
  `subject` VARCHAR(45) NULL DEFAULT NULL,
  `operator` ENUM('=', '<=>', '!=', '<>', '<', '<=', '>', '>=') NULL DEFAULT NULL,
  `enum_list` VARCHAR(511) NULL DEFAULT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_report_type_id` (`report_type_id` ASC),
  UNIQUE INDEX `uq_report_type_id_name` (`report_type_id` ASC, `name` ASC),
  UNIQUE INDEX `uq_report_type_id_rank` (`report_type_id` ASC, `rank` ASC),
  CONSTRAINT `fk_report_restriction_report_type_id`
    FOREIGN KEY (`report_type_id`)
    REFERENCES `cenozo`.`report_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`report_has_report_restriction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`report_has_report_restriction` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`report_has_report_restriction` (
  `report_id` INT UNSIGNED NOT NULL,
  `report_restriction_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `value` TEXT NOT NULL,
  PRIMARY KEY (`report_id`, `report_restriction_id`),
  INDEX `fk_report_restriction_id` (`report_restriction_id` ASC),
  INDEX `fk_report_id` (`report_id` ASC),
  CONSTRAINT `fk_report_has_report_restriction_report_id`
    FOREIGN KEY (`report_id`)
    REFERENCES `cenozo`.`report` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_has_report_restriction_report_restriction_id`
    FOREIGN KEY (`report_restriction_id`)
    REFERENCES `cenozo`.`report_restriction` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`report_schedule_has_report_restriction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`report_schedule_has_report_restriction` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`report_schedule_has_report_restriction` (
  `report_schedule_id` INT UNSIGNED NOT NULL,
  `report_restriction_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `value` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`report_schedule_id`, `report_restriction_id`),
  INDEX `fk_report_restriction_id` (`report_restriction_id` ASC),
  INDEX `fk_report_schedule_id` (`report_schedule_id` ASC),
  CONSTRAINT `fk_report_schedule_has_report_restriction_report_schedule_id`
    FOREIGN KEY (`report_schedule_id`)
    REFERENCES `cenozo`.`report_schedule` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_schedule_has_report_restriction_report_restriction_id`
    FOREIGN KEY (`report_restriction_id`)
    REFERENCES `cenozo`.`report_restriction` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_type_has_report_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_type_has_report_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_type_has_report_type` (
  `application_type_id` INT UNSIGNED NOT NULL,
  `report_type_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`application_type_id`, `report_type_id`),
  INDEX `fk_report_type_id` (`report_type_id` ASC),
  INDEX `fk_application_type_id` (`application_type_id` ASC),
  CONSTRAINT `fk_application_type_has_report_type_application_type_id`
    FOREIGN KEY (`application_type_id`)
    REFERENCES `cenozo`.`application_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_type_has_report_type_report_type_id`
    FOREIGN KEY (`report_type_id`)
    REFERENCES `cenozo`.`report_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_collection`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_has_collection` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_collection` (
  `application_id` INT UNSIGNED NOT NULL,
  `collection_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`application_id`, `collection_id`),
  INDEX `fk_collection_id` (`collection_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_application_has_collection_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_application_has_collection_collection_id`
    FOREIGN KEY (`collection_id`)
    REFERENCES `cenozo`.`collection` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_hin`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_last_hin` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_hin` (
  `participant_id` INT UNSIGNED NOT NULL,
  `hin_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`),
  INDEX `fk_hin_id` (`hin_id` ASC),
  CONSTRAINT `fk_participant_last_hin_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_hin_hin_id`
    FOREIGN KEY (`hin_id`)
    REFERENCES `cenozo`.`hin` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`form_association`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`form_association` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`form_association` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `form_id` INT UNSIGNED NOT NULL,
  `subject` VARCHAR(45) NOT NULL,
  `record_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_form_id` (`form_id` ASC),
  INDEX `dk_record_id` (`record_id` ASC),
  UNIQUE INDEX `uq_form_id_subject_record_id` (`form_id` ASC, `subject` ASC, `record_id` ASC),
  CONSTRAINT `fk_form_association_form_id`
    FOREIGN KEY (`form_id`)
    REFERENCES `cenozo`.`form` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`overview`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`overview` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`overview` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`role_has_overview`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`role_has_overview` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`role_has_overview` (
  `role_id` INT UNSIGNED NOT NULL,
  `overview_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`role_id`, `overview_id`),
  INDEX `fk_overview_id` (`overview_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_role_has_overview_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_role_has_overview_overview_id`
    FOREIGN KEY (`overview_id`)
    REFERENCES `cenozo`.`overview` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_type_has_overview`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_type_has_overview` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_type_has_overview` (
  `application_type_id` INT UNSIGNED NOT NULL,
  `overview_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`application_type_id`, `overview_id`),
  INDEX `fk_overview_id` (`overview_id` ASC),
  INDEX `fk_application_type_id` (`application_type_id` ASC),
  CONSTRAINT `fk_application_type_has_overview_application_type_id`
    FOREIGN KEY (`application_type_id`)
    REFERENCES `cenozo`.`application_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_application_type_has_overview_overview_id`
    FOREIGN KEY (`overview_id`)
    REFERENCES `cenozo`.`overview` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`export`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`export` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`export` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `application_id` INT UNSIGNED NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_application_id_title` (`application_id` ASC, `title` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_export_application_id` (`application_id` ASC),
  CONSTRAINT `fk_export_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_export_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`export_column`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`export_column` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`export_column` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `export_id` INT UNSIGNED NOT NULL,
  `table_name` VARCHAR(45) NOT NULL,
  `subtype` VARCHAR(45) NULL DEFAULT NULL,
  `column_name` VARCHAR(45) NOT NULL,
  `rank` INT UNSIGNED NOT NULL,
  `include` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_export_id_rank` (`export_id` ASC, `rank` ASC),
  INDEX `dk_table_name_subtype` (`table_name` ASC, `subtype` ASC),
  INDEX `fk_export_id` (`export_id` ASC),
  CONSTRAINT `fk_export_column_export_id`
    FOREIGN KEY (`export_id`)
    REFERENCES `cenozo`.`export` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`export_file`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`export_file` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`export_file` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `export_id` INT UNSIGNED NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `size` BIGINT NULL DEFAULT NULL,
  `stage` ENUM('started', 'reading data', 'writing data', 'completed', 'failed') NOT NULL,
  `progress` FLOAT NOT NULL,
  `datetime` DATETIME NOT NULL,
  `elapsed` FLOAT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `dk_datetime` (`datetime` ASC),
  INDEX `fk_export_id` (`export_id` ASC),
  CONSTRAINT `fk_export_file_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_export_file_export_id`
    FOREIGN KEY (`export_id`)
    REFERENCES `cenozo`.`export` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`export_restriction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`export_restriction` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`export_restriction` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `export_id` INT UNSIGNED NOT NULL,
  `table_name` VARCHAR(45) NOT NULL,
  `subtype` VARCHAR(45) NULL DEFAULT NULL,
  `column_name` VARCHAR(45) NOT NULL,
  `rank` INT UNSIGNED NOT NULL,
  `logic` ENUM('or', 'and') NOT NULL,
  `test` ENUM('<=>', '<>', '<', '>', 'like', 'not like') NOT NULL,
  `value` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_export_id_rank` (`export_id` ASC, `rank` ASC),
  INDEX `dk_table_name_subtype` (`table_name` ASC, `subtype` ASC),
  INDEX `fk_export_id` (`export_id` ASC),
  CONSTRAINT `fk_export_restriction_export_id`
    FOREIGN KEY (`export_id`)
    REFERENCES `cenozo`.`export` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_type_has_role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_type_has_role` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_type_has_role` (
  `application_type_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`application_type_id`, `role_id`),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_application_type_id` (`application_type_id` ASC),
  CONSTRAINT `fk_application_type_has_role_application_type_id`
    FOREIGN KEY (`application_type_id`)
    REFERENCES `cenozo`.`application_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_application_type_has_role_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`user_has_system_message`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`user_has_system_message` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`user_has_system_message` (
  `user_id` INT UNSIGNED NOT NULL,
  `system_message_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`user_id`, `system_message_id`),
  INDEX `fk_system_message_id` (`system_message_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  CONSTRAINT `fk_user_has_system_message_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_user_has_system_message_system_message_id`
    FOREIGN KEY (`system_message_id`)
    REFERENCES `cenozo`.`system_message` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`hold_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`hold_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`hold_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `type` ENUM('final', 'temporary') NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `system` TINYINT(1) NOT NULL DEFAULT 0,
  `description` VARCHAR(512) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_type_name` (`type` ASC, `name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`hold`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`hold` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`hold` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `hold_type_id` INT UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NOT NULL,
  `user_id` INT UNSIGNED NULL DEFAULT NULL,
  `site_id` INT UNSIGNED NULL DEFAULT NULL,
  `role_id` INT UNSIGNED NULL DEFAULT NULL,
  `application_id` INT UNSIGNED NULL DEFAULT NULL,
  `note` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_hold_type_id` (`hold_type_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  UNIQUE INDEX `uq_participant_id_datetime` (`participant_id` ASC, `datetime` ASC),
  CONSTRAINT `fk_hold_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_hold_hold_type_id`
    FOREIGN KEY (`hold_type_id`)
    REFERENCES `cenozo`.`hold_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_hold_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_hold_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_hold_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_hold_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_hold`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_last_hold` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_hold` (
  `participant_id` INT UNSIGNED NOT NULL,
  `hold_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`),
  INDEX `fk_hold_id` (`hold_id` ASC),
  CONSTRAINT `fk_participant_last_hold_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_hold_hold_id`
    FOREIGN KEY (`hold_id`)
    REFERENCES `cenozo`.`hold` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`role_has_hold_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`role_has_hold_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`role_has_hold_type` (
  `role_id` INT UNSIGNED NOT NULL,
  `hold_type_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`role_id`, `hold_type_id`),
  INDEX `fk_hold_type_id` (`hold_type_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_role_has_hold_type_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_role_has_hold_type_hold_type_id`
    FOREIGN KEY (`hold_type_id`)
    REFERENCES `cenozo`.`hold_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`failed_login`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`failed_login` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`failed_login` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `application_id` INT UNSIGNED NOT NULL,
  `address` VARCHAR(45) NOT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_failed_login_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_failed_login_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`trace_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`trace_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`trace_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `description` VARCHAR(512) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`trace`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`trace` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`trace` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `trace_type_id` INT UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NOT NULL,
  `user_id` INT UNSIGNED NULL DEFAULT NULL,
  `site_id` INT UNSIGNED NULL DEFAULT NULL,
  `role_id` INT UNSIGNED NULL DEFAULT NULL,
  `application_id` INT UNSIGNED NULL DEFAULT NULL,
  `note` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  UNIQUE INDEX `uq_participant_id_datetime` (`participant_id` ASC, `datetime` ASC),
  INDEX `fk_trace_type_id` (`trace_type_id` ASC),
  CONSTRAINT `fk_trace_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_trace_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_trace_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_trace_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_trace_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_trace_trace_type_id`
    FOREIGN KEY (`trace_type_id`)
    REFERENCES `cenozo`.`trace_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`proxy_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`proxy_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`proxy_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `description` VARCHAR(512) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`proxy`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`proxy` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`proxy` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `proxy_type_id` INT UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NOT NULL,
  `user_id` INT UNSIGNED NULL DEFAULT NULL,
  `site_id` INT UNSIGNED NULL DEFAULT NULL,
  `role_id` INT UNSIGNED NULL DEFAULT NULL,
  `application_id` INT UNSIGNED NULL DEFAULT NULL,
  `note` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  UNIQUE INDEX `uq_participant_id_datetime` (`participant_id` ASC, `datetime` ASC),
  INDEX `fk_proxy_proxy_type_id` (`proxy_type_id` ASC),
  CONSTRAINT `fk_proxy_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proxy_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proxy_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proxy_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proxy_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proxy_proxy_type_id`
    FOREIGN KEY (`proxy_type_id`)
    REFERENCES `cenozo`.`proxy_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_trace`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_last_trace` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_trace` (
  `participant_id` INT UNSIGNED NOT NULL,
  `trace_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`),
  INDEX `fk_trace_id` (`trace_id` ASC),
  CONSTRAINT `fk_participant_last_trace_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_trace_trace_id`
    FOREIGN KEY (`trace_id`)
    REFERENCES `cenozo`.`trace` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_proxy`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_last_proxy` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_proxy` (
  `participant_id` INT UNSIGNED NOT NULL,
  `proxy_id` INT UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`),
  INDEX `fk_proxy_id` (`proxy_id` ASC),
  CONSTRAINT `fk_participant_last_proxy_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_proxy_proxy_id`
    FOREIGN KEY (`proxy_id`)
    REFERENCES `cenozo`.`proxy` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`webphone`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`webphone` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`webphone` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `ip` VARCHAR(15) NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `webphone` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_site_id` (`site_id` ASC),
  UNIQUE INDEX `uq_ip_site_id` (`ip` ASC, `site_id` ASC),
  CONSTRAINT `fk_webphone_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `magnolia` ;

-- -----------------------------------------------------
-- Table `magnolia`.`service`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`service` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`service` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `method` ENUM('DELETE', 'GET', 'PATCH', 'POST', 'PUT') NOT NULL,
  `subject` VARCHAR(45) NOT NULL,
  `resource` TINYINT(1) NOT NULL DEFAULT 0,
  `restricted` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  INDEX `uq_method_subject_resource` (`method` ASC, `subject` ASC, `resource` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`writelog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`writelog` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`writelog` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `method` ENUM('DELETE', 'PATCH', 'POST', 'PUT') NOT NULL,
  `path` VARCHAR(512) NOT NULL,
  `elapsed` FLOAT NULL DEFAULT NULL,
  `status` INT NULL DEFAULT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `dk_datetime` (`datetime` DESC),
  CONSTRAINT `fk_writelog_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_writelog_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_writelog_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`role_has_service`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`role_has_service` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`role_has_service` (
  `role_id` INT UNSIGNED NOT NULL,
  `service_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NULL DEFAULT NULL,
  `create_timestamp` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`role_id`, `service_id`),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_service_id` (`service_id` ASC),
  CONSTRAINT `fk_role_has_service_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_role_has_service_service_id`
    FOREIGN KEY (`service_id`)
    REFERENCES `magnolia`.`service` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`setting`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`setting` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`setting` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_site_id` (`site_id` ASC),
  UNIQUE INDEX `uq_site_id` (`site_id` ASC),
  CONSTRAINT `fk_setting_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`access`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`access` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`access` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `datetime` DATETIME NULL DEFAULT NULL,
  `microtime` DOUBLE NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  UNIQUE INDEX `uq_user_id_role_id_site_id` (`user_id` ASC, `role_id` ASC, `site_id` ASC),
  INDEX `dk_datetime_microtime` (`datetime` ASC, `microtime` ASC),
  CONSTRAINT `fk_access_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_access_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_access_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`deadline`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`deadline` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`deadline` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `date` DATE NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_date` (`date` ASC),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`reqn`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`reqn` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`reqn` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `language_id` INT UNSIGNED NOT NULL,
  `deadline_id` INT UNSIGNED NOT NULL,
  `identifier` VARCHAR(45) NOT NULL,
  `state` ENUM('deferred', 'abandoned') NULL DEFAULT NULL,
  `applicant_name` VARCHAR(63) NULL DEFAULT NULL,
  `applicant_position` VARCHAR(255) NULL DEFAULT NULL,
  `applicant_affiliation` VARCHAR(255) NULL DEFAULT NULL,
  `applicant_address` VARCHAR(511) NULL DEFAULT NULL,
  `applicant_phone` VARCHAR(45) NULL DEFAULT NULL,
  `applicant_email` VARCHAR(127) NULL DEFAULT NULL,
  `graduate_name` VARCHAR(63) NULL DEFAULT NULL,
  `graduate_program` VARCHAR(255) NULL DEFAULT NULL,
  `graduate_institution` VARCHAR(255) NULL DEFAULT NULL,
  `graduate_address` VARCHAR(511) NULL DEFAULT NULL,
  `graduate_phone` VARCHAR(45) NULL DEFAULT NULL,
  `graduate_email` VARCHAR(127) NULL DEFAULT NULL,
  `start_date` DATE NULL DEFAULT NULL,
  `duration` VARCHAR(45) NULL DEFAULT NULL,
  `title` VARCHAR(511) NULL DEFAULT NULL,
  `keywords` VARCHAR(255) NULL DEFAULT NULL,
  `lay_summary` VARCHAR(2047) NULL DEFAULT NULL,
  `background` TEXT NULL DEFAULT NULL,
  `objectives` TEXT NULL DEFAULT NULL,
  `methodology` TEXT NULL DEFAULT NULL,
  `analysis` TEXT NULL DEFAULT NULL,
  `funding` ENUM('yes', 'no', 'requested') NULL DEFAULT NULL,
  `funding_agency` VARCHAR(255) NULL DEFAULT NULL,
  `grant_number` VARCHAR(45) NULL DEFAULT NULL,
  `ethics` TINYINT(1) NULL DEFAULT NULL,
  `ethics_date` DATE NULL DEFAULT NULL,
  `ethics_filename` VARCHAR(255) NULL DEFAULT NULL,
  `agreement_filename` VARCHAR(255) NULL DEFAULT NULL,
  `waiver` ENUM('graduate', 'postdoc') NULL DEFAULT NULL,
  `part2_a_comment` TEXT NULL DEFAULT NULL,
  `part2_b_comment` TEXT NULL DEFAULT NULL,
  `part2_c_comment` TEXT NULL DEFAULT NULL,
  `part2_d_comment` TEXT NULL DEFAULT NULL,
  `part2_e_comment` TEXT NULL DEFAULT NULL,
  `decision_notice` TEXT NULL DEFAULT NULL,
  `deferral_note_part1_a1` TEXT NULL DEFAULT NULL,
  `deferral_note_part1_a2` TEXT NULL DEFAULT NULL,
  `deferral_note_part1_a3` TEXT NULL DEFAULT NULL,
  `deferral_note_part1_a4` TEXT NULL DEFAULT NULL,
  `deferral_note_part1_a5` TEXT NULL DEFAULT NULL,
  `deferral_note_part1_a6` TEXT NULL DEFAULT NULL,
  `deferral_note_part2_a` TEXT NULL DEFAULT NULL,
  `deferral_note_part2_b` TEXT NULL DEFAULT NULL,
  `deferral_note_part2_c` TEXT NULL DEFAULT NULL,
  `deferral_note_part2_d` TEXT NULL DEFAULT NULL,
  `deferral_note_part2_e` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  UNIQUE INDEX `uq_identifier` (`identifier` ASC),
  INDEX `fk_language_id` (`language_id` ASC),
  INDEX `dk_state` (`state` ASC),
  INDEX `fk_deadline_id` (`deadline_id` ASC),
  CONSTRAINT `fk_reqn_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_reqn_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_reqn_deadline_id`
    FOREIGN KEY (`deadline_id`)
    REFERENCES `magnolia`.`deadline` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`coapplicant`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`coapplicant` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`coapplicant` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `reqn_id` INT UNSIGNED NOT NULL,
  `name` VARCHAR(63) NOT NULL,
  `position` VARCHAR(255) NOT NULL,
  `affiliation` VARCHAR(255) NOT NULL,
  `email` VARCHAR(127) NOT NULL,
  `role` VARCHAR(45) NOT NULL,
  `access` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_reqn_id_name` (`reqn_id` ASC, `name` ASC),
  CONSTRAINT `fk_coapplicant_reqn_id`
    FOREIGN KEY (`reqn_id`)
    REFERENCES `magnolia`.`reqn` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`reference`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`reference` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`reference` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `reqn_id` INT UNSIGNED NOT NULL,
  `rank` INT UNSIGNED NOT NULL,
  `reference` VARCHAR(512) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_reqn_id` (`reqn_id` ASC),
  UNIQUE INDEX `uq_reqn_id_rank` (`reqn_id` ASC, `rank` ASC),
  CONSTRAINT `fk_reference_reqn_id`
    FOREIGN KEY (`reqn_id`)
    REFERENCES `magnolia`.`reqn` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`data_option_category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`data_option_category` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`data_option_category` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `rank` INT UNSIGNED NOT NULL,
  `name_en` VARCHAR(127) NOT NULL,
  `name_fr` VARCHAR(45) NOT NULL,
  `comprehensive` TINYINT(1) NOT NULL DEFAULT 0,
  `tracking` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_rank` (`rank` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`data_option`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`data_option` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`data_option` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `data_option_category_id` INT UNSIGNED NOT NULL,
  `rank` INT UNSIGNED NOT NULL,
  `name_en` VARCHAR(127) NOT NULL,
  `name_fr` VARCHAR(127) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_data_option_category_id` (`data_option_category_id` ASC),
  UNIQUE INDEX `uq_data_option_category_id_rank` (`data_option_category_id` ASC, `rank` ASC),
  CONSTRAINT `fk_data_option_data_option_category_id`
    FOREIGN KEY (`data_option_category_id`)
    REFERENCES `magnolia`.`data_option_category` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`final_report`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`final_report` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`final_report` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `reqn_id` INT UNSIGNED NOT NULL,
  `thesis_title` VARCHAR(511) NULL DEFAULT NULL,
  `thesis_status` VARCHAR(127) NULL DEFAULT NULL,
  `activities` TEXT NULL DEFAULT NULL,
  `findings` TEXT NULL DEFAULT NULL,
  `outcomes` TEXT NULL DEFAULT NULL,
  `date` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_reqn_id` (`reqn_id` ASC),
  UNIQUE INDEX `uq_reqn_id` (`reqn_id` ASC),
  CONSTRAINT `fk_final_report_reqn_id`
    FOREIGN KEY (`reqn_id`)
    REFERENCES `magnolia`.`reqn` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`production_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`production_type` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`production_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`production`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`production` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`production` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `final_report_id` INT UNSIGNED NOT NULL,
  `production_type_id` INT UNSIGNED NOT NULL,
  `rank` INT UNSIGNED NOT NULL,
  `detail` VARCHAR(1023) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_final_report_id` (`final_report_id` ASC),
  INDEX `fk_production_type_id` (`production_type_id` ASC),
  UNIQUE INDEX `uq_final_report_id_production_type_id_rank` (`final_report_id` ASC, `production_type_id` ASC, `rank` ASC),
  CONSTRAINT `fk_production_final_report_id`
    FOREIGN KEY (`final_report_id`)
    REFERENCES `magnolia`.`final_report` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_production_type_id1`
    FOREIGN KEY (`production_type_id`)
    REFERENCES `magnolia`.`production_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`notification_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`notification_type` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`notification_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `message_en` TEXT NOT NULL,
  `message_fr` TEXT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`stage_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`stage_type` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`stage_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `phase` ENUM('new', 'review', 'active', 'complete') NOT NULL,
  `rank` INT UNSIGNED NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `status` VARCHAR(45) NOT NULL,
  `decision` TINYINT(1) NOT NULL DEFAULT 0,
  `notification_type_id` INT UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  UNIQUE INDEX `uq_rank` (`rank` ASC),
  INDEX `fk_notification_type_id` (`notification_type_id` ASC),
  CONSTRAINT `fk_stage_type_notification_type_id`
    FOREIGN KEY (`notification_type_id`)
    REFERENCES `magnolia`.`notification_type` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`stage`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`stage` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`stage` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `reqn_id` INT UNSIGNED NOT NULL,
  `stage_type_id` INT UNSIGNED NOT NULL,
  `user_id` INT UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_reqn_id` (`reqn_id` ASC),
  INDEX `fk_stage_type_id` (`stage_type_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  CONSTRAINT `fk_stage_reqn_id`
    FOREIGN KEY (`reqn_id`)
    REFERENCES `magnolia`.`reqn` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_stage_stage_type_id`
    FOREIGN KEY (`stage_type_id`)
    REFERENCES `magnolia`.`stage_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_stage_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`stage_type_has_stage_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`stage_type_has_stage_type` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`stage_type_has_stage_type` (
  `stage_type_id` INT UNSIGNED NOT NULL,
  `next_stage_type_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`stage_type_id`, `next_stage_type_id`),
  INDEX `fk_next_stage_type_id` (`next_stage_type_id` ASC),
  INDEX `fk_stage_type_id` (`stage_type_id` ASC),
  CONSTRAINT `fk_stage_type_has_stage_type_stage_type_id`
    FOREIGN KEY (`stage_type_id`)
    REFERENCES `magnolia`.`stage_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_stage_type_has_stage_type_next_stage_type_id`
    FOREIGN KEY (`next_stage_type_id`)
    REFERENCES `magnolia`.`stage_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`notification`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`notification` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`notification` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `reqn_id` INT UNSIGNED NOT NULL,
  `notification_type_id` INT UNSIGNED NOT NULL,
  `email` VARCHAR(127) NOT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_reqn_id` (`reqn_id` ASC),
  INDEX `fk_notification_type_id` (`notification_type_id` ASC),
  CONSTRAINT `fk_notification_reqn_id`
    FOREIGN KEY (`reqn_id`)
    REFERENCES `magnolia`.`reqn` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_notification_notification_type_id`
    FOREIGN KEY (`notification_type_id`)
    REFERENCES `magnolia`.`notification_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`reqn_note`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`reqn_note` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`reqn_note` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `reqn_id` INT UNSIGNED NOT NULL,
  `property` VARCHAR(31) NOT NULL,
  `public` TINYINT(1) NOT NULL DEFAULT 0,
  `note` VARCHAR(1023) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_reqn_id` (`reqn_id` ASC),
  UNIQUE INDEX `dk_reqn_id_property` (`reqn_id` ASC, `property` ASC),
  CONSTRAINT `fk_reqn_note_reqn_id`
    FOREIGN KEY (`reqn_id`)
    REFERENCES `magnolia`.`reqn` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`review_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`review_type` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`review_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `stage_type_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_stage_type_id` (`stage_type_id` ASC),
  UNIQUE INDEX `uq_name` (`name` ASC),
  CONSTRAINT `fk_review_type_stage_type_id`
    FOREIGN KEY (`stage_type_id`)
    REFERENCES `magnolia`.`stage_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`review`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`review` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`review` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `reqn_id` INT UNSIGNED NOT NULL,
  `review_type_id` INT UNSIGNED NOT NULL,
  `user_id` INT UNSIGNED NULL DEFAULT NULL,
  `date` DATE NOT NULL,
  `recommendation` ENUM('Approved', 'Revise', 'Not Approved') NULL DEFAULT NULL,
  `note` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_reqn_id` (`reqn_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_review_review_type_id` (`review_type_id` ASC),
  UNIQUE INDEX `uq_reqn_id_review_type_id` (`reqn_id` ASC, `review_type_id` ASC),
  CONSTRAINT `fk_review_reqn_id`
    FOREIGN KEY (`reqn_id`)
    REFERENCES `magnolia`.`reqn` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_review_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_review_review_type_id`
    FOREIGN KEY (`review_type_id`)
    REFERENCES `magnolia`.`review_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`pdf_form_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`pdf_form_type` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`pdf_form_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`pdf_form`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`pdf_form` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`pdf_form` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `pdf_form_type_id` INT UNSIGNED NOT NULL,
  `version` DATE NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `fk_pdf_form_type_id` (`pdf_form_type_id` ASC),
  UNIQUE INDEX `uq_pdf_form_type_id_version` (`pdf_form_type_id` ASC, `version` ASC),
  CONSTRAINT `fk_pdf_form_pdf_form_type_id`
    FOREIGN KEY (`pdf_form_type_id`)
    REFERENCES `magnolia`.`pdf_form_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`role_has_review_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`role_has_review_type` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`role_has_review_type` (
  `role_id` INT UNSIGNED NOT NULL,
  `review_type_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`role_id`, `review_type_id`),
  INDEX `fk_review_type_id` (`review_type_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_role_has_review_type_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_role_has_review_type_review_type_id`
    FOREIGN KEY (`review_type_id`)
    REFERENCES `magnolia`.`review_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`notification_type_email`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`notification_type_email` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`notification_type_email` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `notification_type_id` INT UNSIGNED NOT NULL,
  `email` VARCHAR(127) NULL,
  `blind` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `fk_notification_type_id` (`notification_type_id` ASC),
  INDEX `uq_notification_type_id_email` (`notification_type_id` ASC, `email` ASC),
  CONSTRAINT `fk_notification_type_email_notification_type_id`
    FOREIGN KEY (`notification_type_id`)
    REFERENCES `magnolia`.`notification_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`data_option_detail`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`data_option_detail` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`data_option_detail` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `data_option_id` INT UNSIGNED NOT NULL,
  `rank` INT UNSIGNED NOT NULL,
  `name_en` VARCHAR(127) NOT NULL,
  `name_fr` VARCHAR(127) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_data_option_id` (`data_option_id` ASC),
  UNIQUE INDEX `uq_data_option_id_rank` (`data_option_id` ASC, `rank` ASC),
  CONSTRAINT `fk_data_option_detail_data_option_id`
    FOREIGN KEY (`data_option_id`)
    REFERENCES `magnolia`.`data_option` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`footnote`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`footnote` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`footnote` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `note_en` VARCHAR(1023) NOT NULL,
  `note_fr` VARCHAR(1023) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`data_option_category_has_footnote`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`data_option_category_has_footnote` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`data_option_category_has_footnote` (
  `data_option_category_id` INT UNSIGNED NOT NULL,
  `footnote_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`data_option_category_id`, `footnote_id`),
  INDEX `fk_footnote_id` (`footnote_id` ASC),
  INDEX `fk_data_option_category_id` (`data_option_category_id` ASC),
  CONSTRAINT `fk_data_option_category_has_footnote_data_option_category_id`
    FOREIGN KEY (`data_option_category_id`)
    REFERENCES `magnolia`.`data_option_category` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_data_option_category_has_footnote_footnote_id`
    FOREIGN KEY (`footnote_id`)
    REFERENCES `magnolia`.`footnote` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`data_option_has_footnote`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`data_option_has_footnote` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`data_option_has_footnote` (
  `data_option_id` INT UNSIGNED NOT NULL,
  `footnote_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`data_option_id`, `footnote_id`),
  INDEX `fk_footnote_id` (`footnote_id` ASC),
  INDEX `fk_data_option_id` (`data_option_id` ASC),
  CONSTRAINT `fk_data_option_has_footnote_data_option_id`
    FOREIGN KEY (`data_option_id`)
    REFERENCES `magnolia`.`data_option` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_data_option_has_footnote_footnote_id`
    FOREIGN KEY (`footnote_id`)
    REFERENCES `magnolia`.`footnote` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`data_option_detail_has_footnote`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`data_option_detail_has_footnote` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`data_option_detail_has_footnote` (
  `data_option_detail_id` INT UNSIGNED NOT NULL,
  `footnote_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`data_option_detail_id`, `footnote_id`),
  INDEX `fk_footnote_id` (`footnote_id` ASC),
  INDEX `fk_data_option_detail_id` (`data_option_detail_id` ASC),
  CONSTRAINT `fk_data_option_detail_has_footnote_data_option_detail_id`
    FOREIGN KEY (`data_option_detail_id`)
    REFERENCES `magnolia`.`data_option_detail` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_data_option_detail_has_footnote_footnote_id`
    FOREIGN KEY (`footnote_id`)
    REFERENCES `magnolia`.`footnote` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `magnolia`.`reqn_has_data_option`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `magnolia`.`reqn_has_data_option` ;

CREATE TABLE IF NOT EXISTS `magnolia`.`reqn_has_data_option` (
  `reqn_id` INT UNSIGNED NOT NULL,
  `data_option_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `comprehensive` TINYINT(1) NOT NULL DEFAULT 0,
  `tracking` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`reqn_id`, `data_option_id`),
  INDEX `fk_data_option_id` (`data_option_id` ASC),
  INDEX `fk_reqn_id` (`reqn_id` ASC),
  CONSTRAINT `fk_reqn_has_data_option_reqn_id`
    FOREIGN KEY (`reqn_id`)
    REFERENCES `magnolia`.`reqn` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_reqn_has_data_option_data_option_id`
    FOREIGN KEY (`data_option_id`)
    REFERENCES `magnolia`.`data_option` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `cenozo` ;

-- -----------------------------------------------------
-- procedure update_participant_site_for_participant
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_site_for_participant`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_site_for_participant(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_site( application_id, participant_id, site_id, default_site_id )
  SELECT application.id,
         participant.id,
         IF(
           ISNULL( application_has_participant.preferred_site_id ),
           IF(
             application_has_cohort.grouping = 'jurisdiction',
             jurisdiction.site_id,
             region_site.site_id
           ),
           application_has_participant.preferred_site_id
         ) AS site_id,
         IF(
           application_has_cohort.grouping = 'jurisdiction',
           jurisdiction.site_id,
           region_site.site_id
         ) AS default_site_id
  FROM application
  CROSS JOIN participant
  JOIN application_has_cohort ON application.id = application_has_cohort.application_id
  AND application_has_cohort.cohort_id = participant.cohort_id
  LEFT JOIN participant_primary_address ON participant.id = participant_primary_address.participant_id
  LEFT JOIN address ON participant_primary_address.address_id = address.id
  LEFT JOIN jurisdiction ON address.postcode = jurisdiction.postcode
  AND jurisdiction.site_id IN (
    SELECT site_id FROM application_has_site WHERE application_id = application.id
  )
  LEFT JOIN site AS jurisdiction_site ON jurisdiction.site_id = jurisdiction_site.id
  LEFT JOIN region ON address.region_id = region.id
  LEFT JOIN region_site ON region.id = region_site.region_id
  AND region_site.site_id IN (
    SELECT site_id FROM application_has_site WHERE application_id = application.id
  )
  LEFT JOIN site AS region_site_site ON region_site.site_id = region_site_site.id
  AND participant.language_id = region_site.language_id
  LEFT JOIN application_has_participant ON application.id = application_has_participant.application_id
  AND application_has_participant.participant_id = participant.id
  WHERE participant.id = proc_participant_id
  -- we need to match the sites or we might get links to sites in the wrong application
  AND jurisdiction.site_id <=> jurisdiction_site.id
  AND region_site.site_id <=> region_site_site.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_primary_address
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_primary_address`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_primary_address(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_primary_address( participant_id, address_id )
  SELECT participant.id, address.id
  FROM participant
  LEFT JOIN address ON participant.id = address.participant_id
  AND address.rank <=> (
    SELECT MIN( address.rank )
    FROM address
    JOIN region ON address.region_id = region.id
    -- Joining to region_site is used to exclude addresses which are not
    -- in region_site, actual linkage (and language) is irrelevant
    JOIN region_site ON region.id = region_site.region_id
    WHERE address.active = true
    AND address.international = false
    AND address.region_id IS NOT NULL
    AND address.postcode IS NOT NULL
    AND participant.id = address.participant_id
    GROUP BY address.participant_id
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_first_address
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_first_address`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_first_address(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_first_address( participant_id, address_id )
  SELECT participant.id, address.id
  FROM participant
  LEFT JOIN address ON participant.id = address.participant_id
  AND address.rank <=> (
    SELECT MIN( address.rank )
    FROM address
    WHERE address.active
    AND participant.id = address.participant_id
    AND CASE MONTH( CURRENT_DATE() )
      WHEN 1 THEN address.january
      WHEN 2 THEN address.february
      WHEN 3 THEN address.march
      WHEN 4 THEN address.april
      WHEN 5 THEN address.may
      WHEN 6 THEN address.june
      WHEN 7 THEN address.july
      WHEN 8 THEN address.august
      WHEN 9 THEN address.september
      WHEN 10 THEN address.october
      WHEN 11 THEN address.november
      WHEN 12 THEN address.december
      ELSE 0 END = 1
    GROUP BY address.participant_id
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_site_for_jurisdiction
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_site_for_jurisdiction`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_site_for_jurisdiction(IN proc_jurisdiction_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_site( application_id, participant_id, site_id, default_site_id )
  SELECT application.id,
         participant.id,
         IF( 
           ISNULL( application_has_participant.preferred_site_id ),
           jurisdiction.site_id,
           application_has_participant.preferred_site_id
         ),
         jurisdiction.site_id
  FROM application
  CROSS JOIN participant
  JOIN application_has_cohort ON application.id = application_has_cohort.application_id
  AND application_has_cohort.cohort_id = participant.cohort_id
  LEFT JOIN participant_primary_address ON participant.id = participant_primary_address.participant_id
  LEFT JOIN address ON participant_primary_address.address_id = address.id
  LEFT JOIN jurisdiction ON address.postcode = jurisdiction.postcode
  AND jurisdiction.site_id IN (
    SELECT site_id FROM application_has_site WHERE application_id = application.id
  )
  LEFT JOIN site AS jurisdiction_site ON jurisdiction.site_id = jurisdiction_site.id
  LEFT JOIN application_has_participant ON application.id = application_has_participant.application_id
  AND application_has_participant.participant_id = participant.id
  WHERE application_has_cohort.grouping = "jurisdiction"
  AND jurisdiction.id = proc_jurisdiction_id
  -- we need to match the sites or we might get links to sites in the wrong application
  AND jurisdiction.site_id <=> jurisdiction_site.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_site_for_region_site
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_site_for_region_site`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_site_for_region_site(IN proc_region_site_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_site( application_id, participant_id, site_id, default_site_id )
  SELECT application.id,
         participant.id,
         IF(
           ISNULL( application_has_participant.preferred_site_id ),
           region_site.site_id,
           application_has_participant.preferred_site_id
         ),
         region_site.site_id
  FROM application
  CROSS JOIN participant
  JOIN application_has_cohort ON application.id = application_has_cohort.application_id
  AND application_has_cohort.cohort_id = participant.cohort_id
  LEFT JOIN participant_primary_address ON participant.id = participant_primary_address.participant_id
  LEFT JOIN address ON participant_primary_address.address_id = address.id
  LEFT JOIN region ON address.region_id = region.id
  LEFT JOIN region_site ON region.id = region_site.region_id
  AND region_site.site_id IN (
    SELECT site_id FROM application_has_site WHERE application_id = application.id
  )
  LEFT JOIN site AS region_site_site ON region_site.site_id = region_site_site.id
  AND participant.language_id = region_site.language_id
  LEFT JOIN application_has_participant ON application.id = application_has_participant.application_id
  AND application_has_participant.participant_id = participant.id
  WHERE region_site.id = proc_region_site_id
  -- we need to match the sites or we might get links to sites in the wrong application
  AND region_site.site_id <=> region_site_site.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_alternate_first_address
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_alternate_first_address`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_alternate_first_address(IN proc_alternate_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO alternate_first_address( alternate_id, address_id )
  SELECT alternate.id, address.id
  FROM alternate
  LEFT JOIN address ON alternate.id = address.alternate_id
  AND address.rank <=> (
    SELECT MIN( address.rank )
    FROM address
    WHERE address.active
    AND alternate.id = address.alternate_id
    AND CASE MONTH( CURRENT_DATE() )
      WHEN 1 THEN address.january
      WHEN 2 THEN address.february
      WHEN 3 THEN address.march
      WHEN 4 THEN address.april
      WHEN 5 THEN address.may
      WHEN 6 THEN address.june
      WHEN 7 THEN address.july
      WHEN 8 THEN address.august
      WHEN 9 THEN address.september
      WHEN 10 THEN address.october
      WHEN 11 THEN address.november
      WHEN 12 THEN address.december
      ELSE 0 END = 1
    GROUP BY address.alternate_id
  )
  WHERE alternate.id = proc_alternate_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_consent
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_consent`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_consent(IN proc_participant_id INT(10) UNSIGNED, IN proc_consent_type_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_consent( participant_id, consent_type_id, consent_id )
  SELECT participant.id, consent_type.id, consent.id
  FROM participant
  CROSS JOIN consent_type
  LEFT JOIN consent ON participant.id = consent.participant_id
  AND consent_type.id = consent.consent_type_id
  AND consent.datetime <=> (
    SELECT MAX( datetime )
    FROM consent
    WHERE participant.id = consent.participant_id
    AND consent_type.id = consent.consent_type_id
    GROUP BY consent.participant_id, consent.consent_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id
  AND consent_type.id = proc_consent_type_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_written_consent
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_written_consent`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_written_consent(IN proc_participant_id INT(10) UNSIGNED, IN proc_consent_type_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_consent( participant_id, consent_type_id, consent_id )
  SELECT participant.id, consent_type.id, consent.id
  FROM participant
  CROSS JOIN consent_type
  LEFT JOIN consent ON participant.id = consent.participant_id
  AND consent_type.id = consent.consent_type_id
  AND consent.datetime <=> (
    SELECT MAX( datetime )
    FROM consent
    WHERE consent.written = true
    AND participant.id = consent.participant_id
    AND consent_type.id = consent.consent_type_id
    GROUP BY consent.participant_id, consent.consent_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id
  AND consent_type.id = proc_consent_type_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_event
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_event`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_event(IN proc_participant_id INT(10) UNSIGNED, IN proc_event_type_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_event( participant_id, event_type_id, event_id )
  SELECT participant.id, event_type.id, event.id
  FROM participant
  CROSS JOIN event_type
  LEFT JOIN event ON participant.id = event.participant_id
  AND event_type.id = event.event_type_id
  AND event.datetime <=> (
    SELECT MAX( datetime )
    FROM event
    WHERE participant.id = event.participant_id
    AND event_type.id = event.event_type_id
    GROUP BY event.participant_id, event.event_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id
  AND event_type.id = proc_event_type_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_consents
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_consents`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_consents(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_consent( participant_id, consent_type_id, consent_id )
  SELECT participant.id, consent_type.id, consent.id
  FROM participant
  CROSS JOIN consent_type
  LEFT JOIN consent ON participant.id = consent.participant_id
  AND consent_type.id = consent.consent_type_id
  AND consent.datetime <=> (
    SELECT MAX( datetime )
    FROM consent
    WHERE participant.id = consent.participant_id
    AND consent_type.id = consent.consent_type_id
    GROUP BY consent.participant_id, consent.consent_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_written_consents
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_written_consents`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_written_consents(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_consent( participant_id, consent_type_id, consent_id )
  SELECT participant.id, consent_type.id, consent.id
  FROM participant
  CROSS JOIN consent_type
  LEFT JOIN consent ON participant.id = consent.participant_id
  AND consent_type.id = consent.consent_type_id
  AND consent.datetime <=> (
    SELECT MAX( datetime )
    FROM consent
    WHERE consent.written = true
    AND participant.id = consent.participant_id
    AND consent_type.id = consent.consent_type_id
    GROUP BY consent.participant_id, consent.consent_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_events
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_events`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_events(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_event( participant_id, event_type_id, event_id )
  SELECT participant.id, event_type.id, event.id
  FROM participant
  CROSS JOIN event_type
  LEFT JOIN event ON participant.id = event.participant_id
  AND event_type.id = event.event_type_id
  AND event.datetime <=> (
    SELECT MAX( datetime )
    FROM event
    WHERE participant.id = event.participant_id
    AND event_type.id = event.event_type_id
    GROUP BY event.participant_id, event.event_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_hin
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_hin`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_hin(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_hin( participant_id, hin_id )
  SELECT participant.id, hin.id
  FROM participant
  LEFT JOIN hin ON participant.id = hin.participant_id
  AND hin.datetime <=> (
    SELECT MAX( datetime )
    FROM hin 
    WHERE participant.id = hin.participant_id
    GROUP BY hin.participant_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_hold
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_hold`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_hold(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_hold( participant_id, hold_id )
  SELECT participant.id, hold.id
  FROM participant
  LEFT JOIN hold ON participant.id = hold.participant_id
  AND hold.datetime <=> (
    SELECT MAX( datetime )
    FROM hold
    WHERE participant.id = hold.participant_id
    GROUP BY hold.participant_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure remove_duplicate_hold
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`remove_duplicate_hold`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE `remove_duplicate_hold` (IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  -- Declare '_val' variables to read in each record from the cursor
  DECLARE id_val INT UNSIGNED;
  DECLARE participant_id_val INT UNSIGNED;
  DECLARE hold_type_id_val INT UNSIGNED;
  DECLARE last_participant_id_val INT UNSIGNED;
  DECLARE last_hold_type_id_val INT UNSIGNED;

  -- Declare variables used just for cursor and loop control
  DECLARE no_more_rows BOOLEAN;
  DECLARE loop_cntr INT DEFAULT 0;
  DECLARE num_rows INT DEFAULT 0;

  -- Declare the cursor
  DECLARE the_cursor CURSOR FOR
  SELECT id, participant_id, hold_type_id
  FROM hold
  WHERE participant_id = IFNULL( proc_participant_id, participant_id )
  ORDER BY participant_id, datetime;

  -- Declare 'handlers' for exceptions
  DECLARE CONTINUE HANDLER FOR NOT FOUND
  SET no_more_rows = TRUE;

  -- 'open' the cursor and capture the number of rows returned
  -- (the 'select' gets invoked when the cursor is 'opened')
  OPEN the_cursor;
  select FOUND_ROWS() into num_rows;

  SET last_participant_id_val = NULL;
  SET last_hold_type_id_val = NULL;

  the_loop: LOOP

    FETCH the_cursor
    INTO id_val, participant_id_val, hold_type_id_val;

    -- break out of the loop if
      -- 1) there were no records, or
      -- 2) we've processed them all
    IF no_more_rows THEN
      CLOSE the_cursor;
      LEAVE the_loop;
    END IF;

    IF NOT (participant_id_val <=> last_participant_id_val ) THEN
      -- new participant

      IF hold_type_id_val IS NULL THEN
        -- always remove the first hold if the hold-type is null
        DELETE FROM hold WHERE id = id_val;
        SET last_participant_id_val = NULL;
        SET last_hold_type_id_val = NULL;
      ELSE
        -- not deleting the hold, so mark it as the last
        SET last_participant_id_val = participant_id_val;
        SET last_hold_type_id_val = hold_type_id_val;
      END IF;
    ELSE
      -- same participant as last time

      -- check to make sure this hold isn't a duplicate of the last
      IF hold_type_id_val <=> last_hold_type_id_val THEN
        -- delete the duplicate hold
        DELETE FROM hold WHERE id = id_val;
      ELSE
        -- not deleting the hold, so mark it as the last
        SET last_participant_id_val = participant_id_val;
        SET last_hold_type_id_val = hold_type_id_val;
      END IF;
    END IF;

    -- count the number of times looped
    SET loop_cntr = loop_cntr + 1;

  END LOOP the_loop;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure contact_changed
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`contact_changed`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE `contact_changed` (IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  IF proc_participant_id IS NOT NULL THEN
    SELECT trace_type.name, IF( address.id IS NULL, 0, COUNT(*) )
    INTO @trace_type, @address_count
    FROM participant
    JOIN participant_last_trace ON participant.id = participant_last_trace.participant_id
    LEFT JOIN trace ON participant_last_trace.trace_id = trace.id
    LEFT JOIN trace_type ON trace.trace_type_id = trace_type.id
    LEFT JOIN address ON participant.id = address.participant_id AND address.active = 1
    WHERE participant.id = proc_participant_id;

    SELECT IF( phone.id IS NULL, 0, COUNT(*) )
    INTO @phone_count
    FROM participant
    LEFT JOIN phone ON participant.id = phone.participant_id AND phone.active = 1
    WHERE participant.id = proc_participant_id;

    IF 0 = @address_count OR 0 = @phone_count THEN
      IF @trace_type IS NULL THEN
        INSERT INTO trace( participant_id, trace_type_id, datetime, note )
        SELECT proc_participant_id, trace_type.id, UTC_TIMESTAMP(),
               "Automatically added after address or phone changed."
        FROM trace_type
        WHERE name = "site";
      END IF;
    ELSE
      IF @trace_type IS NOT NULL THEN
        INSERT INTO trace( participant_id, trace_type_id, datetime, note )
        VALUES( proc_participant_id, NULL, UTC_TIMESTAMP(),
                "Automatically added after address or phone changed." );
      END IF;
    END IF;
  END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_trace
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_trace`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_trace(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_trace( participant_id, trace_id )
  SELECT participant.id, trace.id
  FROM participant
  LEFT JOIN trace ON participant.id = trace.participant_id
  AND trace.datetime <=> (
    SELECT MAX( datetime )
    FROM trace
    WHERE participant.id = trace.participant_id
    GROUP BY trace.participant_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_proxy
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_last_proxy`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_last_proxy(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_proxy( participant_id, proxy_id )
  SELECT participant.id, proxy.id
  FROM participant
  LEFT JOIN proxy ON participant.id = proxy.participant_id
  AND proxy.datetime <=> (
    SELECT MAX( datetime )
    FROM proxy
    WHERE participant.id = proxy.participant_id
    GROUP BY proxy.participant_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_hold_from_consent
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`get_hold_from_consent`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE `get_hold_from_consent` (IN proc_consent_id INT(10) UNSIGNED, OUT proc_hold_id INT(10) UNSIGNED)
BEGIN
  SELECT hold.id INTO proc_hold_id
  FROM consent
  JOIN consent_type ON consent.consent_type_id = consent_type.id
  LEFT JOIN hold ON consent.datetime = hold.datetime
   AND hold.participant_id = consent.participant_id
  WHERE consent_type.name = "participation"
  AND consent.id = proc_consent_id;
END$$

DELIMITER ;
USE `cenozo`;

DELIMITER $$

USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`participant_BEFORE_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`participant_BEFORE_INSERT` BEFORE INSERT ON `participant` FOR EACH ROW
BEGIN
  DELETE FROM unique_identifier_pool WHERE uid = new.uid;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`participant_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`participant_AFTER_INSERT` AFTER INSERT ON `participant` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_participant( NEW.id );
  CALL update_participant_first_address( NEW.id );
  CALL update_participant_primary_address( NEW.id );
  CALL update_participant_last_consents( NEW.id );
  CALL update_participant_last_written_consents( NEW.id );
  CALL update_participant_last_events( NEW.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`event_type_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`event_type_AFTER_INSERT` AFTER INSERT ON `event_type` FOR EACH ROW
BEGIN
  INSERT INTO participant_last_event( participant_id, event_type_id, event_id )
  SELECT participant.id, NEW.id, NULL
  FROM participant;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`alternate_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`alternate_AFTER_INSERT` AFTER INSERT ON `alternate` FOR EACH ROW
BEGIN
  CALL update_alternate_first_address( NEW.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`address_BEFORE_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`address_BEFORE_INSERT` BEFORE INSERT ON `address` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  ELSE
    SET @test = (
      SELECT COUNT(*) FROM address
      WHERE rank = NEW.rank
      AND alternate_id <=> NEW.alternate_id
      AND participant_id <=> NEW.participant_id
    );
    IF @test > 1 THEN
      -- trigger unique key conflict
      SET @sql = CONCAT(
        "Duplicate entry '",
        NEW.alternate_id, "-", NEW.participant_id, "-", NEW.rank,
        "' for key 'uq_alternate_id_participant_id_rank'"
      );
      SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
    END IF;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`address_BEFORE_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`address_BEFORE_UPDATE` BEFORE UPDATE ON `address` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  ELSE
    SET @test = (
      SELECT COUNT(*) FROM address
      WHERE rank = NEW.rank
      AND alternate_id <=> NEW.alternate_id
      AND participant_id <=> NEW.participant_id
    );
    IF @test > 1 THEN
      -- trigger unique key conflict
      SET @sql = CONCAT(
        "Duplicate entry '",
        NEW.alternate_id, "-", NEW.participant_id, "-", NEW.rank,
        "' for key 'uq_alternate_id_participant_id_rank'"
      );
      SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
    END IF;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`address_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`address_AFTER_INSERT` AFTER INSERT ON `address` FOR EACH ROW
BEGIN
  IF NEW.alternate_id IS NOT NULL THEN
    CALL update_alternate_first_address( NEW.alternate_id );
  ELSE
    CALL update_participant_first_address( NEW.participant_id );
    CALL update_participant_primary_address( NEW.participant_id );
    CALL contact_changed( NEW.participant_id );
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`consent_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`consent_AFTER_UPDATE` AFTER UPDATE ON `consent` FOR EACH ROW
BEGIN
  CALL update_participant_last_consent( NEW.participant_id, NEW.consent_type_id );
  CALL update_participant_last_written_consent( NEW.participant_id, NEW.consent_type_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`consent_AFTER_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`consent_AFTER_DELETE` AFTER DELETE ON `consent` FOR EACH ROW
BEGIN
  CALL update_participant_last_consent( OLD.participant_id, OLD.consent_type_id );
  CALL update_participant_last_written_consent( OLD.participant_id, OLD.consent_type_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`consent_BEFORE_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`consent_BEFORE_DELETE` BEFORE DELETE ON `consent` FOR EACH ROW
BEGIN
  -- remove a participation consent record's associated hold
  SET @test = (
    SELECT consent_type.name
    FROM consent_type
    WHERE id = OLD.consent_type_id );
  IF @test = "participation" THEN
    CALL get_hold_from_consent( NEW.id, @hold_id );
    IF @hold_id IS NOT NULL THEN
      DELETE FROM hold WHERE id = @hold_id;
      CALL remove_duplicate_hold( OLD.participant_id );
    END IF;
  END IF;
END$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_BEFORE_INSERT` $$
USE `cenozo`$$
$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_AFTER_INSERT` AFTER INSERT ON `jurisdiction` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_jurisdiction( NEW.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_BEFORE_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_BEFORE_UPDATE` BEFORE UPDATE ON `jurisdiction` FOR EACH ROW
BEGIN
  SET @test = (
    SELECT COUNT(*) FROM jurisdiction
    JOIN application_has_site ON jurisdiction.site_id = application_has_site.site_id
    WHERE jurisdiction.postcode = NEW.postcode
    AND application_id IN (
      SELECT application_id
      FROM application_has_site
      WHERE application_has_site.site_id = NEW.site_id
    )
    AND jurisdiction.id != NEW.id
  );
  IF @test > 0 THEN
    -- trigger unique key conflict
    SET @sql = CONCAT(
      "Duplicate entry '",
      NEW.site_id, "-", NEW.postcode,
      "' for key 'uq_site_id_postcode'"
    );
    SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_AFTER_UPDATE` AFTER UPDATE ON `jurisdiction` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_jurisdiction( NEW.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_BEFORE_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_BEFORE_DELETE` BEFORE DELETE ON `jurisdiction` FOR EACH ROW
BEGIN
  DELETE FROM participant_site
  WHERE site_id = OLD.site_id;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_AFTER_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_AFTER_DELETE` AFTER DELETE ON `jurisdiction` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_jurisdiction( OLD.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`phone_BEFORE_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`phone_BEFORE_INSERT` BEFORE INSERT ON `phone` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  ELSE
    SET @test = (
      SELECT COUNT(*) FROM phone
      WHERE rank = NEW.rank
      AND alternate_id <=> NEW.alternate_id
      AND participant_id <=> NEW.participant_id
    );
    IF @test > 1 THEN
      -- trigger unique key conflict
      SET @sql = CONCAT(
        "Duplicate entry '",
        NEW.alternate_id, "-", NEW.participant_id, "-", NEW.rank,
        "' for key 'uq_alternate_id_participant_id_rank'"
      );
      SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
    END IF;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`phone_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`phone_AFTER_INSERT` AFTER INSERT ON `phone` FOR EACH ROW
BEGIN
  IF NEW.participant_id IS NOT NULL THEN
    CALL contact_changed( NEW.participant_id );
  END IF;
END$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`phone_BEFORE_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`phone_BEFORE_UPDATE` BEFORE UPDATE ON `phone` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  ELSE
    SET @test = (
      SELECT COUNT(*) FROM phone
      WHERE rank = NEW.rank
      AND alternate_id <=> NEW.alternate_id
      AND participant_id <=> NEW.participant_id
    );
    IF @test > 1 THEN
      -- trigger unique key conflict
      SET @sql = CONCAT(
        "Duplicate entry '",
        NEW.alternate_id, "-", NEW.participant_id, "-", NEW.rank,
        "' for key 'uq_alternate_id_participant_id_rank'"
      );
      SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
    END IF;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`phone_AFTER_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`phone_AFTER_DELETE` AFTER DELETE ON `phone` FOR EACH ROW
BEGIN
  IF OLD.participant_id IS NOT NULL THEN
    CALL contact_changed( OLD.participant_id );
  END IF;
END$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`note_BEFORE_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`note_BEFORE_INSERT` BEFORE INSERT ON `note` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`note_BEFORE_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`note_BEFORE_UPDATE` BEFORE UPDATE ON `note` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`application_has_participant_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`application_has_participant_AFTER_INSERT` AFTER INSERT ON `application_has_participant` FOR EACH ROW
BEGIN

  IF( NEW.preferred_site_id IS NOT NULL ) THEN
    CALL update_participant_site_for_participant( NEW.participant_id );
  END IF;

END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`application_has_participant_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`application_has_participant_AFTER_UPDATE` AFTER UPDATE ON `application_has_participant` FOR EACH ROW
BEGIN

  IF( NOT NEW.preferred_site_id <=> OLD.preferred_site_id ) THEN
    CALL update_participant_site_for_participant( NEW.participant_id );
  END IF;

END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`application_has_participant_BEFORE_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`application_has_participant_BEFORE_DELETE` BEFORE DELETE ON `application_has_participant` FOR EACH ROW
BEGIN

  IF( OLD.preferred_site_id ) THEN
    DELETE FROM participant_site
    WHERE participant_id = OLD.participant_id;
    CALL update_participant_site_for_participant( OLD.participant_id );
  END IF;

END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`event_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`event_AFTER_INSERT` AFTER INSERT ON `event` FOR EACH ROW
BEGIN
  CALL update_participant_last_event( NEW.participant_id, NEW.event_type_id );

  SET @test = ( SELECT record_address FROM event_type WHERE id = NEW.event_type_id );
  IF @test THEN
    INSERT INTO event_address( event_id, international, address_id, address1, address2, city, region_id, postcode )
    SELECT NEW.id, address.id, international, address1, address2, city, region_id, postcode
    FROM participant_primary_address
    JOIN address ON participant_primary_address.address_id = address.id
    WHERE participant_primary_address.participant_id = NEW.participant_id;
  END IF;

END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`event_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`event_AFTER_UPDATE` AFTER UPDATE ON `event` FOR EACH ROW
BEGIN
  CALL update_participant_last_event( NEW.participant_id, NEW.event_type_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`event_AFTER_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`event_AFTER_DELETE` AFTER DELETE ON `event` FOR EACH ROW
BEGIN
  CALL update_participant_last_event( OLD.participant_id, OLD.event_type_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`hin_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`hin_AFTER_INSERT` AFTER INSERT ON `hin` FOR EACH ROW
BEGIN
  CALL update_participant_last_hin( NEW.participant_id );
END;$$


DELIMITER ;
USE `magnolia`;

DELIMITER $$

USE `magnolia`$$
DROP TRIGGER IF EXISTS `magnolia`.`stage_AFTER_INSERT` $$
USE `magnolia`$$
CREATE DEFINER = CURRENT_USER TRIGGER `magnolia`.`stage_AFTER_INSERT` AFTER INSERT ON `stage` FOR EACH ROW
BEGIN
  -- create any review associated with the stage_type
  INSERT IGNORE INTO review( create_timestamp, reqn_id, review_type_id )
  SELECT NULL, NEW.reqn_id, review_type.id
  FROM review_type
  JOIN stage_type ON review_type.stage_type_id = stage_type.id
  WHERE stage_type.id = NEW.stage_type_id;

  -- create the final report if we just created the report required stage
  SELECT name INTO @stage_type FROM stage_type WHERE id = NEW.stage_type_id;
  IF @stage_type = "Report Required" THEN
    INSERT IGNORE INTO final_report( create_timestamp, reqn_id )
    SELECT NULL, NEW.reqn_id;
  END IF;
END$$


USE `magnolia`$$
DROP TRIGGER IF EXISTS `magnolia`.`stage_AFTER_DELETE` $$
USE `magnolia`$$
CREATE DEFINER = CURRENT_USER TRIGGER `magnolia`.`stage_AFTER_DELETE` AFTER DELETE ON `stage` FOR EACH ROW
BEGIN
  -- delete all reviews associated with the stage_type
  DELETE FROM review
  WHERE review_type_id IN (
    SELECT review_type.id
    FROM review_type
    JOIN stage_type ON review_type.stage_type_id = stage_type.id
    WHERE stage_type.id = OLD.stage_type_id
  );
END$$


USE `magnolia`$$
DROP TRIGGER IF EXISTS `magnolia`.`review_BEFORE_INSERT` $$
USE `magnolia`$$
CREATE DEFINER = CURRENT_USER TRIGGER `magnolia`.`review_BEFORE_INSERT` BEFORE INSERT ON `review` FOR EACH ROW
BEGIN
  IF !NEW.date THEN
    SET NEW.date = NOW();
  END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
